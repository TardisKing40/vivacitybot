"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const discord_js_1 = require("discord.js");
const discord_paginationembed_1 = require("discord-paginationembed");
class Embed extends events_1.EventEmitter {
    constructor(authorization, channel, description, sayfa, color, value) {
        super();
        if (!authorization)
            throw new TypeError("Invalid Authorization User");
        if (!channel)
            throw new TypeError("Invalid Channel");
        if (!description)
            throw new TypeError("Invalid Description");
        if (!sayfa)
            throw new TypeError("Invalid Page Number");
        if (!color)
            throw new TypeError("Invalid Page Color");
        this.bos = null;
        this.users = authorization;
        this.channel = channel;
        this.embedDes = description;
        this.sayfa = sayfa;
        this.valu = value;
        this.embedString = color;
        this.pagination = new discord_paginationembed_1.Embeds();
        if (this.embedDes.length <= 0)
            return this.bos;
        if (this.sayfa < 1)
            return this.bos;
    }
    ;
    asyncForEach(array, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let index = 0; index < array.length; index++) {
                yield callback(array[index], index, array);
            }
            ;
        });
    }
    ;
    /**
        * Kullanƒ±≈ü;
        * @param {[message.athor.id]} Discord.User  Embed Listelendiƒüi Zaman Mesajdaki Tepki Kim Tarafƒ±ndan √áalƒ±≈ütƒ±rƒ±lmasƒ±nƒ± Ayarlar.
        * @param {message.channel} Discord.Channel Embed ƒ∞√ßin Gerekli Olan Kanal Bilgilerini Alƒ±r.
        * @param {["message1","message2]} Array Embed'in Description Mesajƒ±nƒ± Belirler;
        * @param {1} Number Embedin Ka√ß Mesajdan Sonra Listeli Olmasƒ±nƒ± Ayarlar.
        * @param {"BLUE"} String Embed Rengini Ayarlar.
        * @param {"mesaj"} String Array Mesajƒ±ndaki T√ºr {mesaj:"Selam"} ≈ûeklinde Olursa String T√ºr√ºnde En Sona "selam" paramteresini √ßekebilmek i√ßin mesaj yazdƒ±k ve Returun olarak "selam" √ßƒ±kar
        */
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            let arrEm = [];
            this.embedDes.forEach((x) => {
                arrEm.push(x);
            });
            const embeds = [];
            let memberCount = 0;
            let totalMemberCount = 0;
            yield this.asyncForEach(arrEm, (member) => __awaiter(this, void 0, void 0, function* () {
                const index = embeds.length === 0 ? 0 : embeds.length - 1;
                let lastEmbed = embeds[index];
                if (lastEmbed && memberCount >= this.sayfa) {
                    lastEmbed = new discord_js_1.MessageEmbed();
                    embeds[embeds.length] = lastEmbed;
                    memberCount = 0;
                }
                else if (!lastEmbed) {
                    lastEmbed = new discord_js_1.MessageEmbed();
                    embeds[index] = lastEmbed;
                }
                const oldDesc = lastEmbed.description || "";
                totalMemberCount++;
                const position = totalMemberCount === 1 ? "üèÜ" :
                    totalMemberCount === 2 ? "ü•à" :
                        totalMemberCount === 3 ? "ü•â" :
                            `**${totalMemberCount}.**`;
                lastEmbed.setDescription(`${oldDesc}\n${this.valu ? member[this.valu].replace("{{position}}", position) : member ? member.toString().replace("{{position}}", position) : null}\n`);
                memberCount++;
            }));
            this.pagination
                .setArray(embeds)
                .setAuthorizedUsers(this.users)
                .setChannel(this.channel)
                .setPageIndicator(false)
                .setPage(1)
                .setDisabledNavigationEmojis(["delete", "jump"])
                .setColor(this.embedString);
            this.pagination.build();
        });
    }
    ;
}
exports.default = Embed;
;
